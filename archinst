#!/bin/bash
kernel.conf () {
    cat <<EOF
MODULES=""
BINARIES=""
FILES=""
HOOKS="systemd autodetect keyboard sd-vconsole modconf block sd-lvm2 filesystems"
EOF
}

grub.conf () {
    cat <<EOF
GRUB_DEFAULT=0
GRUB_TIMEOUT=0
GRUB_DISTRIBUTOR="Arch"
GRUB_CMDLINE_LINUX_DEFAULT="root=/dev/mapper/host-root rw quiet loglevel=3 rd.systemd.show_status=auto rd.udev.log-priority=3"
GRUB_CMDLINE_LINUX=""
GRUB_PRELOAD_MODULES="part_gpt part_msdos lvm"
GRUB_HIDDEN_TIMEOUT=1
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TERMINAL_INPUT=console
GRUB_GFXMODE=auto
GRUB_DISABLE_RECOVERY=true
EOF
}

defuser=archey
defhost=Arch
locale=ru_RU.UTF-8
help="Usage: archinst [sdX] [hostname] [username]"
error1="Error! Please specify at very least destination disk.\n\n$help"
error2="Error! Non existent disk speciefied. May be your typo or general failure in reading disk.\n\n$help"

define_input () {
    echo "Parsing user input…"
    case "$1" in
	    -h) echo $help ; kill $$ ;;
	    "") echo -e $error1 ; kill $$ ;;
	    *) if [ -n "`ls /dev | grep -x $1 2>/dev/null`" ]
	       then
		   disk='/dev/'$1 ;
	       else
		   echo -e $error2 && kill $$
	       fi ;;
    esac
    case "$2" in
	"") host=$defhost ;;
	*) host=$2 ;;
    esac
    case "$3" in
	    "") user=$defuser ;;
	    *) user=$3 ;;
    esac
    echo "…done!"
}

define_GPU () {
    echo "Defining video card…"
    GPU=`lspci | grep -e VGA -e 3D`
    if [ -n "`echo $GPU | grep AMD`" ]
    then
	GPU="xf86-video-amdgpu"
    else
	if [ -n "`echo $GPU | grep ATI`" ]
	then
	    GPU="xf86-video-ati"
	else
	    if [ -n "`echo $GPU | grep Intel`" ]
	    then
		GPU="xf86-video-intel"
	    else
		if [ -n "`echo $GPU | grep Nvidia`" ]
		then
		    GPU="xf86-video-nouveau"
		else
		    GPU="xf86-video-vesa"
		fi
	    fi
	fi
    fi
    echo "…done!"
}

set_disk () {
    echo "Setting partitioning…"
    parted $disk <<EOF
mklabel msdos
yes
ignore
mkpart primary ext4 0% 100% 
yes
set 1 boot on
quit
EOF
    vgcreate host $disk"1" -f
    lvcreate -l 100%FREE host -n root
    mkfs.ext4 /dev/mapper/host-root -FF
    echo "…done!"
}

install_OS () {
    echo "Installing OS…"
    mount /dev/mapper/host-root /mnt
    pacstrap /mnt base base-devel grub lvm2 sudo emacs git plasma xorg-xinit $GPU mesa network-manager-applet yakuake
    echo "…done!"
}

set_basics () {
    echo "Configuring basic OS settings…"
    echo $host > /mnt/etc/hostname
    echo "LANG="$locale > /mnt/etc/locale.conf
    echo -e "\nen_US.UTF-8 UTF-8\n$locale UTF-8" >> /mnt/etc/locale.gen
    echo -e 'root ALL=(ALL) ALL\n\n%wheel ALL=(ALL) NOPASSWD: ALL' > /mnt/etc/sudoers
    echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /mnt/etc/pacman.conf
    env "user=$user" arch-chroot /mnt <<"EOF"
useradd -m -g users -G wheel,audio -s /bin/bash $user
passwd $user -d
systemctl enable NetworkManager
locale-gen
EOF
    echo "…done!"
}

set_boot () {
    echo "Configuring boot…"
    echo -e "`kernel.conf`" > /mnt/etc/mkinitcpio.conf
    echo -e "`grub.conf`" > /mnt/etc/default/grub
    genfstab -U /mnt > /mnt/etc/fstab
    env "disk=$disk" arch-chroot /mnt <<"EOF"
mkinitcpio -p linux
grub-install --target=i386-pc $disk
grub-mkconfig -o /boot/grub/grub.cfg
EOF
    echo "…done!"
}

install_AUR () {
    echo "Installing AUR helper…"
    env "user=$user" arch-chroot /mnt <<"EOF"
s="sudo -u $user"
$s mkdir /home/$user/source
cd /home/$user/source
$s git clone https://aur.archlinux.org/package-query.git
$s git clone https://aur.archlinux.org/yaourt.git
cd package-query
$s makepkg -si
y
y
cd ..
cd yaourt
$s makepkg -si
y
EOF
    echo "…done!"
}

set_GUI () {
    echo "Configuring Graphical User Interface…"
    env "user=$user" arch-chroot /mnt <<"EOF"
touch /home/$user/.xinitrc
echo 'exec startkde' > /home/$user/.xinitrc
su $user
mkdir -p ~/.config/autostart/
touch ~/.config/autostart/lock.desktop
echo -e "[Desktop Entry]\nExec=qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock" > ~/.config/autostart/lock.desktop
yaourt -S xlogin-git --noconfirm
sudo systemctl enable xlogin@$USER
EOF
    echo "…done!"
}

define_input "$@"
define_GPU
set_disk
install_OS
set_basics
set_boot
install_AUR
set_GUI
